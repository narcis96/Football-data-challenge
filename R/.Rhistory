"PredictedProbability" = gbmHoldoutPredictions)))
}
indexes
dim(indexes)
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
dates <- as.Date(traincsv$Date, "%Y-%m-%d")
years <- as.numeric(format(dates, "%Y"))
months <- format(dates, "%d")
uniqueYears <- sort.int(unique(years))
for (i in 1:(length(uniqueYears) - 1))
{
year <- uniqueYears[i]
nextYear <- uniqueYears[i+1]
indx <- as.numeric(format(dates, "%Y")) == year & as.numeric(format(dates, "%m")) >= 8
indx <- indx | (as.numeric(format(dates, "%Y")) == nextYear & as.numeric(format(dates, "%m")) <= 6)
indx <- which(indx == TRUE)
if(length(indx) > 0)
{
rbind(indexes, indx)
}
}
matches <- matrix(0, length(traincsv$ID), 2);
winners <- matrix(0, length(traincsv$ID), 1);
for (i in 1:length(traincsv$ID))
{
array <- unlist(train[i,], use.names = FALSE)
array <- array[!is.na(array)]
matches[i,] <- array[3:4]
winners[i] <- array[5]
if(winners[i] == 3)
winners[i] <- 1
else if(winners[i] == 1)
winners[i] <- 3
}
LogLossBinary = function(actual, predicted, eps = 1e-15) {
predicted = pmin(pmax(predicted, eps), 1-eps)
- (sum(actual * log(predicted) + (1 - actual) * log(1 - predicted))) / length(actual)
}
for (i in 1:nrow(indexes))
{
dataSubsetProportion = .2;
rows = indexes[i,]
trainingNonHoldoutSet = traincsv[!(1:nrow(traincsv) %in% rows), 3:4];#to train
trainingHoldoutSet = traincsv[(1:nrow(traincsv) %in% rows), 3:4];#to test
print(nrow(trainingHoldoutSet))
print(nrow(trainingNonHoldoutSet))
gbmWithCrossValidation = gbm(formula = traincsv$FTR[!(1:nrow(traincsv) %in% rows)] ~ .,
distribution = "multinomial",
data = trainingNonHoldoutSet,
n.trees = 2000,
shrinkage = .1,
n.minobsinnode = 200,
cv.folds = 5,
n.cores = 1)
bestTreeForPrediction = gbm.perf(gbmWithCrossValidation)
gbmHoldoutPredictions = predict(object = gbmWithCrossValidation,
newdata = trainingHoldoutSet,
n.trees = bestTreeForPrediction,
type = "response")
gbmNonHoldoutPredictions = predict(object = gbmWithCrossValidation,
newdata = trainingNonHoldoutSet,
n.trees = bestTreeForPrediction,
type = "response")
print(paste(LogLossBinary(winners[rows], gbmHoldoutPredictions),
"Holdout Log Loss"))
print(paste(LogLossBinary(winners[!(1:nrow(traincsv) %in% rows)], gbmNonHoldoutPredictions),
"Non-Holdout Log Loss"))
print(head(data.frame("Actual" = winners[rows],
"PredictedProbability" = gbmHoldoutPredictions)))
}
dim(traincsv)
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
rbind(traincsv, testcsv)
print(dim(traincsv))
seq1 <- seq(1:20)
seq2 <- seq(21:40)
bind <- cbind(seq1,seq2)
bind
seq1 <- seq(1:20)
seq2 <- seq(21:40)
bind <- cbind(seq1,seq2)
sseq1
seq1
seq2
bind
seq2 <- seq(21:40)
seq2
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
bind(testcsv,1:nrow(testcsv))
rbind(traincsv, testcsv)
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
testcsv <- cbind(testcsv,1:nrow(testcsv))
traincsv <- rbind(traincsv, testcsv)
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
testcsv <- cbind(testcsv,1:nrow(testcsv))
dim(testcsv)
dim(traincsv)
traincsv <- rbind(traincsv, testcsv)
testcsv
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
dim(traincsv)
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
dim(traincsv)
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
testcsv <- cbind(testcsv,1:nrow(testcsv))
traincsv <- rbind(traincsv, testcsv)
print(dim(traincsv))
dates <- as.Date(traincsv$Date, "%Y-%m-%d")
years <- as.numeric(format(dates, "%Y"))
months <- format(dates, "%d")
uniqueYears <- sort.int(unique(years))
for (i in 1:(length(uniqueYears) - 1))
{
year <- uniqueYears[i]
nextYear <- uniqueYears[i+1]
indx <- as.numeric(format(dates, "%Y")) == year & as.numeric(format(dates, "%m")) >= 8
indx <- indx | (as.numeric(format(dates, "%Y")) == nextYear & as.numeric(format(dates, "%m")) <= 6)
indx <- which(indx == TRUE)
if(length(indx) > 0)
{
rbind(indexes, indx)
}
}
matches <- matrix(0, length(traincsv$ID), 2);
winners <- matrix(0, length(traincsv$ID), 1);
for (i in 1:length(traincsv$ID))
{
array <- unlist(train[i,], use.names = FALSE)
array <- array[!is.na(array)]
matches[i,] <- array[3:4]
winners[i] <- array[5]
if(winners[i] == 3)
winners[i] <- 1
else if(winners[i] == 1)
winners[i] <- 3
}
LogLossBinary = function(actual, predicted, eps = 1e-15) {
predicted = pmin(pmax(predicted, eps), 1-eps)
- (sum(actual * log(predicted) + (1 - actual) * log(1 - predicted))) / length(actual)
}
for (i in 1:nrow(indexes))
{
dataSubsetProportion = .2;
rows = indexes[i,]
trainingNonHoldoutSet = traincsv[!(1:nrow(traincsv) %in% rows), 3:4];#to train
trainingHoldoutSet = traincsv[(1:nrow(traincsv) %in% rows), 3:4];#to test
print(nrow(trainingHoldoutSet))
print(nrow(trainingNonHoldoutSet))
gbmWithCrossValidation = gbm(formula = traincsv$FTR[!(1:nrow(traincsv) %in% rows)] ~ .,
distribution = "multinomial",
data = trainingNonHoldoutSet,
n.trees = 2000,
shrinkage = .1,
n.minobsinnode = 200,
cv.folds = 5,
n.cores = 1)
bestTreeForPrediction = gbm.perf(gbmWithCrossValidation)
gbmHoldoutPredictions = predict(object = gbmWithCrossValidation,
newdata = trainingHoldoutSet,
n.trees = bestTreeForPrediction,
type = "response")
gbmNonHoldoutPredictions = predict(object = gbmWithCrossValidation,
newdata = trainingNonHoldoutSet,
n.trees = bestTreeForPrediction,
type = "response")
print(paste(LogLossBinary(winners[rows], gbmHoldoutPredictions),
"Holdout Log Loss"))
print(paste(LogLossBinary(winners[!(1:nrow(traincsv) %in% rows)], gbmNonHoldoutPredictions),
"Non-Holdout Log Loss"))
print(head(data.frame("Actual" = winners[rows],
"PredictedProbability" = gbmHoldoutPredictions)))
}
uniqueYears
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
testcsv <- cbind(testcsv,1:nrow(testcsv))
traincsv <- rbind(traincsv, testcsv)
print(dim(traincsv))
dates <- as.Date(traincsv$Date, "%Y-%m-%d")
years <- as.numeric(format(dates, "%Y"))
months <- format(dates, "%d")
uniqueYears <- sort.int(unique(years))
for (i in 1:(length(uniqueYears) - 1))
{
if(year != 2015)
{
year <- uniqueYears[i]
nextYear <- uniqueYears[i+1]
indx <- as.numeric(format(dates, "%Y")) == year & as.numeric(format(dates, "%m")) >= 8
indx <- indx | (as.numeric(format(dates, "%Y")) == nextYear & as.numeric(format(dates, "%m")) <= 6)
indx <- which(indx == TRUE)
if(length(indx) > 0)
{
rbind(indexes, indx)
}
}
}
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
#train = traincsv
testcsv <- read.csv("../testSet/test.csv",header = TRUE,sep=",")
testcsv <- cbind(testcsv,1:nrow(testcsv))
traincsv <- rbind(traincsv, testcsv)
print(dim(traincsv))
dates <- as.Date(traincsv$Date, "%Y-%m-%d")
years <- as.numeric(format(dates, "%Y"))
months <- format(dates, "%d")
uniqueYears <- sort.int(unique(years))
for (i in 1:(length(uniqueYears) - 1))
{
if(year != 2015)
{
year <- uniqueYears[i]
nextYear <- uniqueYears[i+1]
indx <- as.numeric(format(dates, "%Y")) == year & as.numeric(format(dates, "%m")) >= 8
indx <- indx | (as.numeric(format(dates, "%Y")) == nextYear & as.numeric(format(dates, "%m")) <= 6)
indx <- which(indx == TRUE)
if(length(indx) > 0)
{
rbind(indexes, indx)
}
}
}
matches <- matrix(0, length(traincsv$ID), 2);
winners <- matrix(0, length(traincsv$ID), 1);
for (i in 1:length(traincsv$ID))
{
array <- unlist(train[i,], use.names = FALSE)
array <- array[!is.na(array)]
matches[i,] <- array[3:4]
winners[i] <- array[5]
if(winners[i] == 3)
winners[i] <- 1
else if(winners[i] == 1)
winners[i] <- 3
}
LogLossBinary = function(actual, predicted, eps = 1e-15) {
predicted = pmin(pmax(predicted, eps), 1-eps)
- (sum(actual * log(predicted) + (1 - actual) * log(1 - predicted))) / length(actual)
}
for (i in 1:nrow(indexes))
{
dataSubsetProportion = .2;
rows = indexes[i,]
trainingNonHoldoutSet = traincsv[!(1:nrow(traincsv) %in% rows), 3:4];#to train
trainingHoldoutSet = traincsv[(1:nrow(traincsv) %in% rows), 3:4];#to test
print(nrow(trainingHoldoutSet))
print(nrow(trainingNonHoldoutSet))
gbmWithCrossValidation = gbm(formula = traincsv$FTR[!(1:nrow(traincsv) %in% rows)] ~ .,
distribution = "multinomial",
data = trainingNonHoldoutSet,
n.trees = 2000,
shrinkage = .1,
n.minobsinnode = 200,
cv.folds = 5,
n.cores = 1)
bestTreeForPrediction = gbm.perf(gbmWithCrossValidation)
gbmHoldoutPredictions = predict(object = gbmWithCrossValidation,
newdata = trainingHoldoutSet,
n.trees = bestTreeForPrediction,
type = "response")
gbmNonHoldoutPredictions = predict(object = gbmWithCrossValidation,
newdata = trainingNonHoldoutSet,
n.trees = bestTreeForPrediction,
type = "response")
print(paste(LogLossBinary(winners[rows], gbmHoldoutPredictions),
"Holdout Log Loss"))
print(paste(LogLossBinary(winners[!(1:nrow(traincsv) %in% rows)], gbmNonHoldoutPredictions),
"Non-Holdout Log Loss"))
print(head(data.frame("Actual" = winners[rows],
"PredictedProbability" = gbmHoldoutPredictions)))
}
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
train = traincsv[1:1520]
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
train = traincsv[1:1520,]
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
train = traincsv[1:1520,]
test = traincvs[1521:nrow(traincsv),]
print(dim(train))
print(dim(test))
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
train = traincsv[1:1520,]
test = traincvs[1521:nrow(traincsv),]
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
train = traincsv[1:1520,]
test = traincsv[1521:nrow(traincsv),]
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
train = traincsv[1:1520,]
test = traincsv[1521:nrow(traincsv),]
print(dim(train))
print(dim(test))
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
train = traincsv[1:1520,]
test = traincsv[1521:nrow(traincsv),]
print(dim(train))
print(dim(test))
dates <- as.Date(traincsv$Date, "%Y-%m-%d")
years <- as.numeric(format(dates, "%Y"))
months <- format(dates, "%d")
uniqueYears <- sort.int(unique(years))
for (i in 1:(length(uniqueYears) - 1))
{
if(year != 2015)
{
year <- uniqueYears[i]
nextYear <- uniqueYears[i+1]
indx <- as.numeric(format(dates, "%Y")) == year & as.numeric(format(dates, "%m")) >= 8
indx <- indx | (as.numeric(format(dates, "%Y")) == nextYear & as.numeric(format(dates, "%m")) <= 6)
indx <- which(indx == TRUE)
if(length(indx) > 0)
{
rbind(indexes, indx)
}
}
}
matches <- matrix(0, length(traincsv$ID), 2);
winners <- matrix(0, length(traincsv$ID), 1);
for (i in 1:length(traincsv$ID))
{
array <- unlist(train[i,], use.names = FALSE)
array <- array[!is.na(array)]
matches[i,] <- array[3:4]
winners[i] <- array[5]
if(winners[i] == 3)
winners[i] <- 1
else if(winners[i] == 1)
winners[i] <- 3
}
rows = 1:1520
train = traincsv[!(1:nrow(traincsv) %in% rows), 3:4];#to train
test = traincsv[(1:nrow(traincsv) %in% rows), 3:4];#to test
print(nrow(test))
print(nrow(train))
gbmWithCrossValidation = gbm(formula = traincsv$FTR[!(1:nrow(traincsv) %in% rows)] ~ .,
distribution = "multinomial",
data = train,
n.trees = 2000,
shrinkage = .1,
n.minobsinnode = 200,
cv.folds = 5,
n.cores = 1)
bestTreeForPrediction = gbm.perf(gbmWithCrossValidation)
gbmTestPredictions = predict(object = gbmWithCrossValidation,
newdata = test,
n.trees = bestTreeForPrediction,
type = "response")
print(gbmTestPredictions)
dim(gbmTestPredictions)
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
train = traincsv[1:1520,]
test = traincsv[1521:nrow(traincsv),]
print(dim(train))
print(dim(test))
dates <- as.Date(traincsv$Date, "%Y-%m-%d")
years <- as.numeric(format(dates, "%Y"))
months <- format(dates, "%d")
uniqueYears <- sort.int(unique(years))
for (i in 1:(length(uniqueYears) - 1))
{
if(year != 2015)
{
year <- uniqueYears[i]
nextYear <- uniqueYears[i+1]
indx <- as.numeric(format(dates, "%Y")) == year & as.numeric(format(dates, "%m")) >= 8
indx <- indx | (as.numeric(format(dates, "%Y")) == nextYear & as.numeric(format(dates, "%m")) <= 6)
indx <- which(indx == TRUE)
if(length(indx) > 0)
{
rbind(indexes, indx)
}
}
}
matches <- matrix(0, length(traincsv$ID), 2);
winners <- matrix(0, length(traincsv$ID), 1);
for (i in 1:length(traincsv$ID))
{
array <- unlist(train[i,], use.names = FALSE)
array <- array[!is.na(array)]
matches[i,] <- array[3:4]
winners[i] <- array[5]
if(winners[i] == 3)
winners[i] <- 1
else if(winners[i] == 1)
winners[i] <- 3
}
rows = 1521:2130
train = traincsv[!(1:nrow(traincsv) %in% rows), 3:4];#to train
test = traincsv[(1:nrow(traincsv) %in% rows), 3:4];#to test
print(nrow(test))
print(nrow(train))
setwd("/Users/gemenenarcis/Documents/MATLAB/Football-data-challenge/R/")
library(gbm)
traincsv <- read.csv("../trainSet/train_R.csv",header = TRUE,sep=",")
train = traincsv[1:1520,]
test = traincsv[1521:nrow(traincsv),]
print(dim(train))
print(dim(test))
dates <- as.Date(traincsv$Date, "%Y-%m-%d")
years <- as.numeric(format(dates, "%Y"))
months <- format(dates, "%d")
uniqueYears <- sort.int(unique(years))
for (i in 1:(length(uniqueYears) - 1))
{
if(year != 2015)
{
year <- uniqueYears[i]
nextYear <- uniqueYears[i+1]
indx <- as.numeric(format(dates, "%Y")) == year & as.numeric(format(dates, "%m")) >= 8
indx <- indx | (as.numeric(format(dates, "%Y")) == nextYear & as.numeric(format(dates, "%m")) <= 6)
indx <- which(indx == TRUE)
if(length(indx) > 0)
{
rbind(indexes, indx)
}
}
}
matches <- matrix(0, length(train$ID), 2);
winners <- matrix(0, length(train$ID), 1);
for (i in 1:length(train$ID))
{
array <- unlist(train[i,], use.names = FALSE)
array <- array[!is.na(array)]
matches[i,] <- array[3:4]
winners[i] <- array[5]
if(winners[i] == 3)
winners[i] <- 1
else if(winners[i] == 1)
winners[i] <- 3
}
rows = 1521:2130
train = traincsv[!(1:nrow(traincsv) %in% rows), 3:4];#to train
test = traincsv[(1:nrow(traincsv) %in% rows), 3:4];#to test
print(nrow(test))
print(nrow(train))
gbmWithCrossValidation = gbm(formula = traincsv$FTR[!(1:nrow(traincsv) %in% rows)] ~ .,
distribution = "multinomial",
data = train,
n.trees = 2000,
shrinkage = .1,
n.minobsinnode = 200,
cv.folds = 5,
n.cores = 1)
bestTreeForPrediction = gbm.perf(gbmWithCrossValidation)
gbmTestPredictions = predict(object = gbmWithCrossValidation,
newdata = test,
n.trees = bestTreeForPrediction,
type = "response")
print(gbmTestPredictions)
dim(gbmTestPredictions)
gbmTestPredictions[1,]
gbmTestPredictions[1,1,]
gbmTestPredictions[1,2,]
gbmTestPredictions[1,3,]
gbmTestPredictions[2,1,]
gbmTestPredictions[2,2,]
gbmTestPredictions[2,3,]
